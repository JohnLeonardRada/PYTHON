        </para>

        <para>
            There are 3 approaches to developing a custom Hibernate type.  As a means of illustrating the different
            approaches, lets consider a use case where we need to compose a <classname>java.math.BigDecimal</classname>
            and <classname>java.util.Currency</classname> together into a custom <classname>Money</classname> class.
        </para>

        <section id="types-custom-type">
            <title>Custom types using <interfacename>org.hibernate.type.Type</interfacename></title>
            <para>
                The first approach is to directly implement the <interfacename>org.hibernate.type.Type</interfacename>
                interface (or one of its derivatives).  Probably, you will be more interested in the more specific
                <interfacename>org.hibernate.type.BasicType</interfacename> contract which would allow registration of
                the type (see <xref linkend="types-registry"/>).  The benefit of this registration is that whenever
                the metadata for a particular property does not specify the Hibernate type to use, Hibernate will
                consult the registry for the exposed property type.  In our example, the property type would be
                <classname>Money</cl