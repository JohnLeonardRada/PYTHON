l#FORCE">org.hibernate.LockMode.FORCE</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>instead use PESSIMISTIC_FORCE_INCREMENT</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/ejb/QueryHints.html#HINT_TIMEOUT">org.hibernate.ejb.QueryHints.HINT_TIMEOUT</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>HINT_TIMEOUT (org.hibernate.timeout),
 instead use SPEC_HINT_TIMEOUT (javax.persistence.query.timeout)</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#IMAGE">org.hibernate.Hibernate.IMAGE</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/StandardBasicTypes.html#IMAGE"><CODE>StandardBasicTypes.IMAGE</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#INTEGER">org.hibernate.Hibernate.INTEGER</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/StandardBasicTypes.html#INTEGER"><CODE>StandardBasicTypes.INTEGER</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/FetchMode.html#LAZY">org.hibernate.FetchMode.LAZY</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use <tt>FetchMode.SELECT</tt></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#LOCALE">org.hibernate.Hibernate.LOCALE</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/StandardBasicTypes.html#LOCALE"><CODE>StandardBasicTypes.LOCALE</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#LONG">org.hibernate.Hibernate.LONG</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/StandardBasicTypes.html#LONG"><CODE>StandardBasicTypes.LONG</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#MATERIALIZED_BLOB">org.hibernate.Hibernate.MATERIALIZED_BLOB</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/StandardBasicTypes.html#MATERIALIZED_BLOB"><CODE>StandardBasicTypes.MATERIALIZED_BLOB</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#MATERIALIZED_CLOB">org.hibernate.Hibernate.MATERIALIZED_CLOB</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/StandardBasicTypes.html#MATERIALIZED_CLOB"><CODE>StandardBasicTypes.MATERIALIZED_CLOB</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/FlushMode.html#NEVER">org.hibernate.FlushMode.NEVER</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use <A HREF="org/hibernate/FlushMode.html#MANUAL"><CODE>FlushMode.MANUAL</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#OBJECT">org.hibernate.Hibernate.OBJECT</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/ObjectType.html#INSTANCE"><CODE>ObjectType.INSTANCE</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#SERIALIZABLE">org.hibernate.Hibernate.SERIALIZABLE</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/StandardBasicTypes.html#SERIALIZABLE"><CODE>StandardBasicTypes.SERIALIZABLE</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#SHORT">org.hibernate.Hibernate.SHORT</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/StandardBasicTypes.html#SHORT"><CODE>StandardBasicTypes.SHORT</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#STRING">org.hibernate.Hibernate.STRING</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/StandardBasicTypes.html#STRING"><CODE>StandardBasicTypes.STRING</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#TEXT">org.hibernate.Hibernate.TEXT</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/StandardBasicTypes.html#TEXT"><CODE>StandardBasicTypes.TEXT</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#TIME">org.hibernate.Hibernate.TIME</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/StandardBasicTypes.html#TIME"><CODE>StandardBasicTypes.TIME</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#TIMESTAMP">org.hibernate.Hibernate.TIMESTAMP</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/StandardBasicTypes.html#TIMESTAMP"><CODE>StandardBasicTypes.TIMESTAMP</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#TIMEZONE">org.hibernate.Hibernate.TIMEZONE</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/StandardBasicTypes.html#TIMEZONE"><CODE>StandardBasicTypes.TIMEZONE</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#TRUE_FALSE">org.hibernate.Hibernate.TRUE_FALSE</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/StandardBasicTypes.html#TRUE_FALSE"><CODE>StandardBasicTypes.TRUE_FALSE</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/LockMode.html#UPGRADE">org.hibernate.LockMode.UPGRADE</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>instead use PESSIMISTIC_WRITE</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#WRAPPER_BINARY">org.hibernate.Hibernate.WRAPPER_BINARY</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/StandardBasicTypes.html#WRAPPER_BINARY"><CODE>StandardBasicTypes.WRAPPER_BINARY</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#WRAPPER_CHARACTERS_CLOB">org.hibernate.Hibernate.WRAPPER_CHARACTERS_CLOB</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/StandardBasicTypes.html#WRAPPER_CHARACTERS_CLOB"><CODE>StandardBasicTypes.WRAPPER_CHARACTERS_CLOB</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#WRAPPER_MATERIALIZED_BLOB">org.hibernate.Hibernate.WRAPPER_MATERIALIZED_BLOB</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/StandardBasicTypes.html#WRAPPER_MATERIALIZED_BLOB"><CODE>StandardBasicTypes.WRAPPER_MATERIALIZED_BLOB</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#YES_NO">org.hibernate.Hibernate.YES_NO</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/StandardBasicTypes.html#YES_NO"><CODE>StandardBasicTypes.YES_NO</CODE></A> instead.</I>&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<P>
<A NAME="method"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Deprecated Methods</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/cfg/Mappings.html#addUniqueConstraints(org.hibernate.mapping.Table, java.util.List)">org.hibernate.cfg.Mappings.addUniqueConstraints(Table, List)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/cfg/Mappings.html#addUniqueConstraintHolders(org.hibernate.mapping.Table, java.util.List)"><CODE>Mappings.addUniqueConstraintHolders(org.hibernate.mapping.Table, java.util.List<org.hibernate.cfg.UniqueConstraintHolder>)</CODE></A> instead</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#any(org.hibernate.type.Type, org.hibernate.type.Type)">org.hibernate.Hibernate.any(Type, Type)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/TypeHelper.html#any(org.hibernate.type.Type, org.hibernate.type.Type)"><CODE>TypeHelper.any(org.hibernate.type.Type, org.hibernate.type.Type)</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/id/enhanced/OptimizerFactory.html#buildOptimizer(java.lang.String, java.lang.Class, int)">org.hibernate.id.enhanced.OptimizerFactory.buildOptimizer(String, Class, int)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/id/enhanced/OptimizerFactory.html#buildOptimizer(java.lang.String, java.lang.Class, int, long)"><CODE>OptimizerFactory.buildOptimizer(String, Class, int, long)</CODE></A> instead</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/cfg/annotations/TableBinder.html#buildUniqueConstraints(javax.persistence.UniqueConstraint[])">org.hibernate.cfg.annotations.TableBinder.buildUniqueConstraints(UniqueConstraint[])</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/cfg/annotations/TableBinder.html#buildUniqueConstraintHolders(javax.persistence.UniqueConstraint[])"><CODE>TableBinder.buildUniqueConstraintHolders(javax.persistence.UniqueConstraint[])</CODE></A> instead</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/jdbc/Batcher.html#closeConnection(java.sql.Connection)">org.hibernate.jdbc.Batcher.closeConnection(Connection)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Obtain connections from <CODE>ConnectionProvider</CODE> instead</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Session.html#connection()">org.hibernate.Session.connection()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>(scheduled for removal in 4.x).  Replacement depends on need; for doing direct JDBC stuff use
 <A HREF="org/hibernate/Session.html#doWork(org.hibernate.jdbc.Work)"><CODE>Session.doWork(org.hibernate.jdbc.Work)</CODE></A>; for opening a 'temporary Session' use (TBD).</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/hql/ast/util/ASTUtil.html#create(antlr.ASTFactory, int, java.lang.String)">org.hibernate.hql.ast.util.ASTUtil.create(ASTFactory, int, String)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>silly</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#createBlob(byte[])">org.hibernate.Hibernate.createBlob(byte[])</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/LobHelper.html#createBlob(byte[])"><CODE>LobHelper.createBlob(byte[])</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#createBlob(byte[], org.hibernate.Session)">org.hibernate.Hibernate.createBlob(byte[], Session)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/LobHelper.html#createBlob(byte[])"><CODE>LobHelper.createBlob(byte[])</CODE></A> instead on the <A HREF="org/hibernate/LobHelper.html" title="interface in org.hibernate"><CODE>LobHelper</CODE></A> obtained from
 <A HREF="org/hibernate/Session.html#getLobHelper()"><CODE>Session.getLobHelper()</CODE></A></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#createBlob(java.io.InputStream)">org.hibernate.Hibernate.createBlob(InputStream)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>With no direct replacement.  Use <A HREF="org/hibernate/Hibernate.html#createBlob(java.io.InputStream, long)"><CODE>Hibernate.createBlob(InputStream,long)</CODE></A> instead, passing in the length</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#createBlob(java.io.InputStream, int)">org.hibernate.Hibernate.createBlob(InputStream, int)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/LobHelper.html#createBlob(java.io.InputStream, long)"><CODE>LobHelper.createBlob(InputStream, long)</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#createBlob(java.io.InputStream, long)">org.hibernate.Hibernate.createBlob(InputStream, long)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/LobHelper.html#createBlob(java.io.InputStream, long)"><CODE>LobHelper.createBlob(InputStream, long)</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#createBlob(java.io.InputStream, long, org.hibernate.Session)">org.hibernate.Hibernate.createBlob(InputStream, long, Session)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/LobHelper.html#createBlob(java.io.InputStream, long)"><CODE>LobHelper.createBlob(InputStream, long)</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#createClob(java.io.Reader, int)">org.hibernate.Hibernate.createClob(Reader, int)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/LobHelper.html#createClob(java.io.Reader, long)"><CODE>LobHelper.createClob(Reader, long)</CODE></A> instead</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#createClob(java.io.Reader, long)">org.hibernate.Hibernate.createClob(Reader, long)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/LobHelper.html#createClob(java.io.Reader, long)"><CODE>LobHelper.createClob(Reader, long)</CODE></A> instead</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#createClob(java.io.Reader, long, org.hibernate.Session)">org.hibernate.Hibernate.createClob(Reader, long, Session)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/LobHelper.html#createClob(java.io.Reader, long)"><CODE>LobHelper.createClob(Reader, long)</CODE></A> instead</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#createClob(java.lang.String)">org.hibernate.Hibernate.createClob(String)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/LobHelper.html#createClob(java.lang.String)"><CODE>LobHelper.createClob(String)</CODE></A> instead</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#createClob(java.lang.String, org.hibernate.Session)">org.hibernate.Hibernate.createClob(String, Session)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/LobHelper.html#createClob(java.lang.String)"><CODE>LobHelper.createClob(String)</CODE></A> instead on the <A HREF="org/hibernate/LobHelper.html" title="interface in org.hibernate"><CODE>LobHelper</CODE></A> obtained from
 <A HREF="org/hibernate/Session.html#getLobHelper()"><CODE>Session.getLobHelper()</CODE></A></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/ejb/Ejb3Configuration.html#createEntityManagerFactory()">org.hibernate.ejb.Ejb3Configuration.createEntityManagerFactory()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I></I>&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/ejb/HibernatePersistence.html#createEntityManagerFactory(java.util.Map)">org.hibernate.ejb.HibernatePersistence.createEntityManagerFactory(Map)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I></I>&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/ejb/Ejb3Configuration.html#createEntityManagerFactory(java.util.Map)">org.hibernate.ejb.Ejb3Configuration.createEntityManagerFactory(Map)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use the Java Persistence API</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/id/IdentifierGeneratorHelper.html#createNumber(long, java.lang.Class)">org.hibernate.id.IdentifierGeneratorHelper.createNumber(long, Class)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use the <A HREF="org/hibernate/id/IdentifierGeneratorHelper.html#getIntegralDataTypeHolder(java.lang.Class)"><CODE>holders</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/classic/Session.html#createSQLQuery(java.lang.String, java.lang.String[], java.lang.Class[])">org.hibernate.classic.Session.createSQLQuery(String, String[], Class[])</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use <A HREF="org/hibernate/SQLQuery.html#addRoot(java.lang.String, java.lang.String)"><CODE>SQLQuery.addRoot(java.lang.String, java.lang.String)</CODE></A> or <A HREF="org/hibernate/SQLQuery.html#addEntity(java.lang.String)"><CODE>SQLQuery.addEntity(java.lang.String)</CODE></A> variants
 instead to define the aliases/classes</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/classic/Session.html#createSQLQuery(java.lang.String, java.lang.String, java.lang.Class)">org.hibernate.classic.Session.createSQLQuery(String, String, Class)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use <A HREF="org/hibernate/SQLQuery.html#addRoot(java.lang.String, java.lang.String)"><CODE>SQLQuery.addRoot(java.lang.String, java.lang.String)</CODE></A> or <A HREF="org/hibernate/SQLQuery.html#addEntity(java.lang.String)"><CODE>SQLQuery.addEntity(java.lang.String)</CODE></A> variants
 instead to define the alias/class</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#custom(java.lang.Class)">org.hibernate.Hibernate.custom(Class)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/TypeHelper.html#custom(java.lang.Class)"><CODE>TypeHelper.custom(java.lang.Class)</CODE></A> instead; see http://opensource.atlassian.com/projects/hibernate/browse/HHH-5182</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/type/TypeFactory.html#custom(java.lang.Class, java.util.Properties, org.hibernate.type.TypeFactory.TypeScope)">org.hibernate.type.TypeFactory.custom(Class<UserType>, Properties, TypeFactory.TypeScope)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Only for use temporary use by <A HREF="org/hibernate/Hibernate.html" title="class in org.hibernate"><CODE>Hibernate</CODE></A></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#custom(java.lang.Class, java.util.Properties)">org.hibernate.Hibernate.custom(Class, Properties)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/TypeHelper.html#custom(java.lang.Class)"><CODE>TypeHelper.custom(java.lang.Class)</CODE></A> instead; see http://opensource.atlassian.com/projects/hibernate/browse/HHH-5182</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#custom(java.lang.Class, java.lang.String[], java.lang.String[])">org.hibernate.Hibernate.custom(Class, String[], String[])</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/TypeHelper.html#custom(java.lang.Class)"><CODE>TypeHelper.custom(java.lang.Class)</CODE></A> instead; see http://opensource.atlassian.com/projects/hibernate/browse/HHH-5182</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/type/TypeFactory.html#customComponent(java.lang.Class, java.util.Properties, org.hibernate.type.TypeFactory.TypeScope)">org.hibernate.type.TypeFactory.customComponent(Class<CompositeUserType>, Properties, TypeFactory.TypeScope)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Only for use temporary use by <A HREF="org/hibernate/Hibernate.html" title="class in org.hibernate"><CODE>Hibernate</CODE></A></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/classic/Session.html#delete(java.lang.String)">org.hibernate.classic.Session.delete(String)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>consider using HQL delete statements</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/classic/Session.html#delete(java.lang.String, java.lang.Object[], org.hibernate.type.Type[])">org.hibernate.classic.Session.delete(String, Object[], Type[])</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>consider using HQL delete statements</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/classic/Session.html#delete(java.lang.String, java.lang.Object, org.hibernate.type.Type)">org.hibernate.classic.Session.delete(String, Object, Type)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>consider using HQL delete statements</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/cfg/search/HibernateSearchEventListenerRegister.html#enableHibernateSearch(org.hibernate.event.EventListeners, java.util.Properties)">org.hibernate.cfg.search.HibernateSearchEventListenerRegister.enableHibernateSearch(EventListeners, Properties)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>as of release 3.4.0.CR2, replaced by Hibernate Search's <CODE>org.hibernate.search.cfg.EventListenerRegister#enableHibernateSearch(EventListeners, Properties)</CODE></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#entity(java.lang.Class)">org.hibernate.Hibernate.entity(Class)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/TypeHelper.html#entity(java.lang.Class)"><CODE>TypeHelper.entity(java.lang.Class)</CODE></A> instead; see http://opensource.atlassian.com/projects/hibernate/browse/HHH-5182</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Hibernate.html#entity(java.lang.String)">org.hibernate.Hibernate.entity(String)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/TypeHelper.html#entity(java.lang.Class)"><CODE>TypeHelper.entity(java.lang.Class)</CODE></A> instead; see http://opensource.atlassian.com/projects/hibernate/browse/HHH-5182</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/SessionFactory.html#evict(java.lang.Class)">org.hibernate.SessionFactory.evict(Class)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/Cache.html#evictEntityRegion(java.lang.Class)"><CODE>Cache.evictEntityRegion(Class)</CODE></A> accessed through
 <A HREF="org/hibernate/SessionFactory.html#getCache()"><CODE>SessionFactory.getCache()</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/SessionFactory.html#evict(java.lang.Class, java.io.Serializable)">org.hibernate.SessionFactory.evict(Class, Serializable)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/Cache.html#containsEntity(java.lang.Class, java.io.Serializable)"><CODE>Cache.containsEntity(Class, Serializable)</CODE></A> accessed through
 <A HREF="org/hibernate/SessionFactory.html#getCache()"><CODE>SessionFactory.getCache()</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/SessionFactory.html#evictCollection(java.lang.String)">org.hibernate.SessionFactory.evictCollection(String)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/Cache.html#evictCollectionRegion(java.lang.String)"><CODE>Cache.evictCollectionRegion(String)</CODE></A> accessed through
 <A HREF="org/hibernate/SessionFactory.html#getCache()"><CODE>SessionFactory.getCache()</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/SessionFactory.html#evictCollection(java.lang.String, java.io.Serializable)">org.hibernate.SessionFactory.evictCollection(String, Serializable)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/Cache.html#evictCollection(java.lang.String, java.io.Serializable)"><CODE>Cache.evictCollection(String,Serializable)</CODE></A> accessed through
 <A HREF="org/hibernate/SessionFactory.html#getCache()"><CODE>SessionFactory.getCache()</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/SessionFactory.html#evictEntity(java.lang.String)">org.hibernate.SessionFactory.evictEntity(String)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/Cache.html#evictEntityRegion(java.lang.String)"><CODE>Cache.evictEntityRegion(String)</CODE></A> accessed through
 <A HREF="org/hibernate/SessionFactory.html#getCache()"><CODE>SessionFactory.getCache()</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/SessionFactory.html#evictEntity(java.lang.String, java.io.Serializable)">org.hibernate.SessionFactory.evictEntity(String, Serializable)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/Cache.html#evictEntity(java.lang.String, java.io.Serializable)"><CODE>Cache.evictEntity(String,Serializable)</CODE></A> accessed through
 <A HREF="org/hibernate/SessionFactory.html#getCache()"><CODE>SessionFactory.getCache()</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/SessionFactory.html#evictQueries()">org.hibernate.SessionFactory.evictQueries()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/Cache.html#evictQueryRegions()"><CODE>Cache.evictQueryRegions()</CODE></A> accessed through
 <A HREF="org/hibernate/SessionFactory.html#getCache()"><CODE>SessionFactory.getCache()</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/SessionFactory.html#evictQueries(java.lang.String)">org.hibernate.SessionFactory.evictQueries(String)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/Cache.html#evictQueryRegion(java.lang.String)"><CODE>Cache.evictQueryRegion(String)</CODE></A> accessed through
 <A HREF="org/hibernate/SessionFactory.html#getCache()"><CODE>SessionFactory.getCache()</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/cfg/annotations/TableBinder.html#fillTable(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, java.util.List, java.lang.String, org.hibernate.mapping.Table, org.hibernate.cfg.Mappings)">org.hibernate.cfg.annotations.TableBinder.fillTable(String, String, String, String, boolean, List, String, Table, Mappings)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/cfg/annotations/TableBinder.html#buildAndFillTable(java.lang.String, java.lang.String, org.hibernate.cfg.ObjectNameSource, org.hibernate.cfg.ObjectNameNormalizer.NamingStrategyHelper, boolean, java.util.List, java.lang.String, org.hibernate.mapping.Table, org.hibernate.cfg.Mappings, java.lang.String)"><CODE>TableBinder.buildAndFillTable(java.lang.String, java.lang.String, org.hibernate.cfg.ObjectNameSource, org.hibernate.cfg.ObjectNameNormalizer.NamingStrategyHelper, boolean, java.util.List<org.hibernate.cfg.UniqueConstraintHolder>, java.lang.String, org.hibernate.mapping.Table, org.hibernate.cfg.Mappings, java.lang.String)</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/classic/Session.html#filter(java.lang.Object, java.lang.String)">org.hibernate.classic.Session.filter(Object, String)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use <A HREF="org/hibernate/Session.html#createFilter(java.lang.Object, java.lang.String)"><CODE>Session.createFilter(Object, String)</CODE></A>.<A HREF="org/hibernate/Query.html#list()"><CODE>Query.list()</CODE></A></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/classic/Session.html#filter(java.lang.Object, java.lang.String, java.lang.Object[], org.hibernate.type.Type[])">org.hibernate.classic.Session.filter(Object, String, Object[], Type[])</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use <A HREF="org/hibernate/Session.html#createFilter(java.lang.Object, java.lang.String)"><CODE>Session.createFilter(Object, String)</CODE></A>.setXYZ.<A HREF="org/hibernate/Query.html#list()"><CODE>Query.list()</CODE></A></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/classic/Session.html#filter(java.lang.Object, java.lang.String, java.lang.Object, org.hibernate.type.Type)">org.hibernate.classic.Session.filter(Object, String, Object, Type)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use <A HREF="org/hibernate/Session.html#createFilter(java.lang.Object, java.lang.String)"><CODE>Session.createFilter(Object, String)</CODE></A>.setXYZ.<A HREF="org/hibernate/Query.html#list()"><CODE>Query.list()</CODE></A></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/classic/Session.html#find(java.lang.String)">org.hibernate.classic.Session.find(String)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use <A HREF="org/hibernate/Session.html#createQuery(java.lang.String)"><CODE>Session.createQuery(java.lang.String)</CODE></A>.<A HREF="org/hibernate/Query.html#list()"><CODE>Query.list()</CODE></A></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/classic/Session.html#find(java.lang.String, java.lang.Object[], org.hibernate.type.Type[])">org.hibernate.classic.Session.find(String, Object[], Type[])</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use <A HREF="org/hibernate/Session.html#createQuery(java.lang.String)"><CODE>Session.createQuery(java.lang.String)</CODE></A>.setXYZ.<A HREF="org/hibernate/Query.html#list()"><CODE>Query.list()</CODE></A></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/classic/Session.html#find(java.lang.String, java.lang.Object, org.hibernate.type.Type)">org.hibernate.classic.Session.find(String, Object, Type)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use <A HREF="org/hibernate/Session.html#createQuery(java.lang.String)"><CODE>Session.createQuery(java.lang.String)</CODE></A>.setXYZ.<A HREF="org/hibernate/Query.html#list()"><CODE>Query.list()</CODE></A></I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Session.html#get(java.lang.Class, java.io.Serializable, org.hibernate.LockMode)">org.hibernate.Session.get(Class, Serializable, LockMode)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>LockMode parameter should be replaced with LockOptions</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/type/SingleColumnType.html#get(java.sql.ResultSet, java.lang.String)">org.hibernate.type.SingleColumnType.get(ResultSet, String)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/SingleColumnType.html#get(java.sql.ResultSet, java.lang.String, org.hibernate.engine.SessionImplementor)"><CODE>SingleColumnType.get(ResultSet, String, SessionImplementor)</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/type/AbstractSingleColumnStandardBasicType.html#get(java.sql.ResultSet, java.lang.String)">org.hibernate.type.AbstractSingleColumnStandardBasicType.get(ResultSet, String)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/type/AbstractStandardBasicType.html#get(java.sql.ResultSet, java.lang.String, org.hibernate.engine.SessionImplementor)"><CODE>AbstractStandardBasicType.get(ResultSet, String, SessionImplementor)</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/Session.html#get(java.lang.String, java.io.Serializable, org.hibernate.LockMode)">org.hibernate.Session.get(String, Serializable, LockMode)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>LockMode parameter should be replaced with LockOptions</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/hql/ast/util/ASTUtil.html#getConstantName(java.lang.Class, int)">org.hibernate.hql.ast.util.ASTUtil.getConstantName(Class, int)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use #getTokenTypeName instead</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/dialect/Dialect.html#getCreateSequenceStrings(java.lang.String)">org.hibernate.dialect.Dialect.getCreateSequenceStrings(String)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/dialect/Dialect.html#getCreateSequenceString(java.lang.String, int, int)"><CODE>Dialect.getCreateSequenceString(String, int, int)</CODE></A> instead</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/hql/ast/tree/ConstructorNode.html#getDataType()">org.hibernate.hql.ast.tree.ConstructorNode.getDataType()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>(tell clover to ignore this method)</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/engine/SessionImplementor.html#getEnabledFilters()">org.hibernate.engine.SessionImplementor.getEnabledFilters()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use #getLoadQueryInfluencers instead</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/type/CharBooleanType.html#getFalseString()">org.hibernate.type.CharBooleanType.getFalseString()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Pass the true/false values into constructor instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/engine/SessionImplementor.html#getFetchProfile()">org.hibernate.engine.SessionImplementor.getFetchProfile()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use #getLoadQueryInfluencers instead</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/engine/SessionImplementor.html#getFilterParameterType(java.lang.String)">org.hibernate.engine.SessionImplementor.getFilterParameterType(String)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use #getLoadQueryInfluencers instead</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/engine/SessionImplementor.html#getFilterParameterValue(java.lang.String)">org.hibernate.engine.SessionImplementor.getFilterParameterValue(String)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>use #getLoadQueryInfluencers instead</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/tuple/entity/EntityTuplizer.html#getIdentifier(java.lang.Object)">org.hibernate.tuple.entity.EntityTuplizer.getIdentifier(Object)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/tuple/entity/EntityTuplizer.html#getIdentifier(java.lang.Object, org.hibernate.engine.SessionImplementor)"><CODE>EntityTuplizer.getIdentifier(Object,SessionImplementor)</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/metadata/ClassMetadata.html#getIdentifier(java.lang.Object, org.hibernate.EntityMode)">org.hibernate.metadata.ClassMetadata.getIdentifier(Object, EntityMode)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/metadata/ClassMetadata.html#getIdentifier(java.lang.Object, org.hibernate.engine.SessionImplementor)"><CODE>ClassMetadata.getIdentifier(Object,SessionImplementor)</CODE></A> instead</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/persister/entity/EntityPersister.html#getIdentifier(java.lang.Object, org.hibernate.EntityMode)">org.hibernate.persister.entity.EntityPersister.getIdentifier(Object, EntityMode)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/persister/entity/EntityPersister.html#getIdentifier(java.lang.Object, org.hibernate.engine.SessionImplementor)"><CODE>EntityPersister.getIdentifier(Object,SessionImplementor)</CODE></A> instead</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/engine/Mapping.html#getIdentifierGeneratorFactory()">org.hibernate.engine.Mapping.getIdentifierGeneratorFactory()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>temporary solution</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/engine/jdbc/JdbcSupport.html#getLobCreator()">org.hibernate.engine.jdbc.JdbcSupport.getLobCreator()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/engine/jdbc/JdbcSupport.html#getLobCreator(org.hibernate.engine.jdbc.LobCreationContext)"><CODE>JdbcSupport.getLobCreator(LobCreationContext)</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/sql/Select.html#getLockMode()">org.hibernate.sql.Select.getLockMode()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Instead use getLockOptions</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/event/AbstractPreDatabaseOperationEvent.html#getSource()">org.hibernate.event.AbstractPreDatabaseOperationEvent.getSource()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/event/AbstractEvent.html#getSession()"><CODE>AbstractEvent.getSession()</CODE></A> instead</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/cfg/Mappings.html#getTableUniqueConstraints()">org.hibernate.cfg.Mappings.getTableUniqueConstraints()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/cfg/Mappings.html#getUniqueConstraintHoldersByTable()"><CODE>Mappings.getUniqueConstraintHoldersByTable()</CODE></A> instead</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/type/CharBooleanType.html#getTrueString()">org.hibernate.type.CharBooleanType.getTrueString()</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Pass the true/false values into constructor instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/tuple/entity/EntityTuplizer.html#instantiate(java.io.Serializable)">org.hibernate.tuple.entity.EntityTuplizer.instantiate(Serializable)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/tuple/entity/EntityTuplizer.html#instantiate(java.io.Serializable, org.hibernate.engine.SessionImplementor)"><CODE>EntityTuplizer.instantiate(Serializable, SessionImplementor)</CODE></A> instead.</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/metadata/ClassMetadata.html#instantiate(java.io.Serializable, org.hibernate.EntityMode)">org.hibernate.metadata.ClassMetadata.instantiate(Serializable, EntityMode)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/metadata/ClassMetadata.html#instantiate(java.io.Serializable, org.hibernate.engine.SessionImplementor)"><CODE>ClassMetadata.instantiate(Serializable, SessionImplementor)</CODE></A> instead</I>&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><A HREF="org/hibernate/persister/entity/EntityPersister.html#instantiate(java.io.Serializable, org.hibernate.EntityMode)">org.hibernate.persister.entity.EntityPersister.instantiate(Serializable, EntityMode)</A>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>Use <A HREF="org/hibernate/persister/entity/EntityPersister.html#instantiate(java.io.Serializable, org.hibernate.engine.SessionImplementor)"><CODE>EntityPersister.instantiate(Serializable, SessionImplem