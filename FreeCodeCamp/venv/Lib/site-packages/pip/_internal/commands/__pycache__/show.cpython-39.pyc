!frag["dojoDontFollow"]){
dojo.widget.getParser().createSubComponents(frag,this);
}
},buildRendering:function(args,frag){
var ts=dojo.widget._templateCache[this.widgetType];
if(args["templatecsspath"]){
args["templateCssPath"]=args["templatecsspath"];
}
var _798=args["templateCssPath"]||this.templateCssPath;
if(_798&&!dojo.widget._cssFiles[_798.toString()]){
if((!this.templateCssString)&&(_798)){
this.templateCssString=dojo.hostenv.getText(_798);
this.templateCssPath=null;
}
dojo.widget._cssFiles[_798.toString()]=true;
}
if((this["templateCssString"])&&(!dojo.widget._cssStrings[this.templateCssString])){
dojo.html.insertCssText(this.templateCssString,null,_798);
dojo.widget._cssStrings[this.templateCssString]=true;
}
if((!this.preventClobber)&&((this.templatePath)||(this.templateNode)||((this["templateString"])&&(this.templateString.length))||((typeof ts!="undefined")&&((ts["string"])||(ts["node"]))))){
this.buildFromTemplate(args,frag);
}else{
this.domNode=this.getFragNodeRef(frag);
}
this.fillInTemplate(args,frag);
},buildFromTemplate:function(args,frag){
var _79b=false;
if(args["templatepath"]){
args["templatePath"]=args["templatepath"];
}
dojo.widget.fillFromTemplateCache(this,args["templatePath"],null,_79b);
var ts=dojo.widget._templateCache[this.templatePath?this.templatePath.toString():this.widgetType];
if((ts)&&(!_79b)){
if(!this.templateString.length){
this.templateString=ts["string"];
}
if(!this.templateNode){
this.templateNode=ts["node"];
}
}
var _79d=false;
var node=null;
var tstr=this.templateString;
if((!this.templateNode)&&(this.templateString)){
_79d=this.templateString.match(/\$\{([^\}]+)\}/g);
if(_79d){
var hash=this.strings||{};
for(var key in dojo.widget.defaultStrings){
if(dojo.lang.isUndefined(hash[key])){
hash[key]=dojo.widget.defaultStrings[key];
}
}
for(var i=0;i<_79d.length;i++){
var key=_79d[i];
key=key.substring(2,key.length-1);
var kval=(key.substring(0,5)=="this.")?dojo.lang.getObjPathValue(key.substring(5),this):hash[key];
var _7a4;
if((kval)||(dojo.lang.isString(kval))){
_7a4=new String((dojo.lang.isFunction(kval))?kval.call(this,key,this.templateString):kval);
while(_7a4.indexOf("\"")>-1){
_7a4=_7a4.replace("\"","&quot;");
}
tstr=tstr.replace(_79d[i],_7a4);
}
}
}else{
this.templateNode=this.createNodesFromText(this.templateString,true)[0];
if(!_79b){
ts.node=this.templateNode;
}
}
}
if((!this.templateNode)&&(!_79d)){
dojo.debug("DomWidget.buildFromTemplate: could not create template");
return false;
}else{
if(!_79d){
node=this.templateNode.cloneNode(true);
if(!node){
return false;
}
}else{
node=this.createNodesFromText(tstr,true)[0];
}
}
this.domNode=node;
this.attachTemplateNodes();
if(this.isContainer&&this.containerNode){
var src=this.getFragNodeRef(frag);
if(src){
dojo.dom.moveChildren(src,this.containerNode);
}
}
},attachTemplateNodes:function(_7a6,_7a7){
if(!_7a6){
_7a6=this.domNode;
}
if(!_7a7){
_7a7=this;
}
return dojo.widget.attachTemplateNodes(_7a6,_7a7,dojo.widget.getDojoEventsFromStr(this.templateString));
},fillInTemplate:function(){
},destroyRendering:function(){
try{
dojo.dom.destroyNode(this.domNode);
delete this.domNode;
}
catch(e){
}
if(this._sourceNodeRef){
try{
dojo.dom.destroyNode(this._sourceNodeRef);
}
catch(e){
}
}
},createNodesFromText:function(){
dojo.unimplemented("dojo.widget.DomWidget.createNodesFromText");
}});
dojo.provide("dojo.html.util");
dojo.html.getElementWindow=function(_7a8){
return dojo.html.getDocumentWindow(_7a8.ownerDocument);
};
dojo.html.getDocumentWindow=function(doc){
if(dojo.render.html.safari&&!doc._parentWindow){
var fix=function(win){
win.document._parentWindow=win;
for(var i=0;i<win.frames.length;i++){
fix(win.frames[i]);
}
};
fix(window.top);
}
if(dojo.render.html.ie&&window!==document.parentWindow&&!doc._parentWindow){
doc.parentWindow.execScript("document._parentWindow = window;","Javascript");
var win=doc._parentWindow;
doc._parentWindow=null;
return win;
}
return doc._parentWindow||doc.parentWindow||doc.defaultView;
};
dojo.html.gravity=function(node,e){
node=dojo.byId(node);
var _7b0=dojo.html.getCursorPosition(e);
with(dojo.html){
var _7b1=getAbsolutePosition(node,true);
var bb=getBorderBox(node);
var _7b3=_7b1.x+(bb.width/2);
var _7b4=_7b1.y+(bb.height/2);
}
with(dojo.html.gravity){
return ((_7b0.x<_7b3?WEST:EAST)|(_7b0.y<_7b4?NORTH:SOUTH));
}
};
dojo.html.gravity.NORTH=1;
dojo.html.gravity.SOUTH=1<<1;
dojo.html.gravity.EAST=1<<2;
dojo.html.gravity.WEST=1<<3;
dojo.html.overElement=function(_7b5,e){
_7b5=dojo.byId(_7b5);
var _7b7=dojo.html.getCursorPosition(e);
var bb=dojo.html.getBorderBox(_7b5);
var _7b9=dojo.html.getAbsolutePosition(_7b5,true,dojo.html.boxSizing.BORDER_BOX);
var top=_7b9.y;
var _7bb=top+bb.height;
var left=_7b9.x;
var _7bd=left+bb.width;
return (_7b7.x>=left&&_7b7.x<=_7bd&&_7b7.y>=top&&_7b7.y<=_7bb);
};
dojo.html.renderedTextContent=function(node){
node=dojo.byId(node);
var _7bf="";
if(node==null){
return _7bf;
}
for(var i=0;i<node.childNodes.length;i++){
switch(node.childNodes[i].nodeType){
case 1:
case 5:
var _7c1="unknown";
try{
_7c1=dojo.html.getStyle(node.childNodes[i],"display");
}
catch(E){
}
switch(_7c1){
case "block":
case "list-item":
case "run-in":
case "table":
case "table-row-group":
case "table-header-group":
case "table-footer-group":
case "table-row":
case "table-column-group":
case "table-column":
case "table-cell":
case "table-caption":
_7bf+="\n";
_7bf+=dojo.html.renderedTextContent(node.childNodes[i]);
_7bf+="\n";
break;
case "none":
break;
default:
if(node.childNodes[i].tagName&&node.childNodes[i].tagName.toLowerCase()=="br"){
_7bf+="\n";
}else{
_7bf+=dojo.html.renderedTextContent(node.childNodes[i]);
}
break;
}
break;
case 3:
case 2:
case 4:
var text=node.childNodes[i].nodeValue;
var _7c3="unknown";
try{
_7c3=dojo.html.getStyle(node,"text-transform");
}
catch(E){
}
switch(_7c3){
case "capitalize":
var _7c4=text.split(" ");
for(var i=0;i<_7c4.length;i++){
_7c4[i]=_7c4[i].charAt(0).toUpperCase()+_7c4[i].substring(1);
}
text=_7c4.join(" ");
break;
case "uppercase":
text=text.toUpperCase();
break;
case "lowercase":
text=text.toLowerCase();
break;
default:
break;
}
switch(_7c3){
case "nowrap":
break;
case "pre-wrap":
break;
case "pre-line":
break;
case "pre":
break;
default:
text=text.replace(/\s+/," ");
if(/\s$/.test(_7bf)){
text.replace(/^\s/,"");
}
